# ChatDoc Web Application Troubleshooting Context

This document provides a comprehensive summary of the ChatDoc web application's configuration, deployment details, and the troubleshooting steps undertaken to restore its functionality on an AWS EC2 instance after an Elastic IP change. It includes all relevant parameters, paths, configuration files, environment variables, and the connections between different components.

## 1. Application Overview and Infrastructure Details

*   **Application Name:** ChatDoc
*   **Application Components:**
    *   **Frontend:** React application built with Vite.
    *   **Backend:** Python application served by Gunicorn.
    *   **Web Server/Proxy:** Nginx.
*   **Deployment Environment:** AWS EC2 instance.
*   **EC2 Instance ID:** `i-0d494fc5803f380c9` (named `chatdoc-backend-server`)
*   **Elastic IP (Public IP):** `18.214.91.97` (This is the public-facing IP address for accessing the application).
*   **Local SSH Key Path:** `D:\download\chatdoc-keypair.pem` (Used for SSH access to the EC2 instance).

### Key Technical Concepts Involved:
*   **AWS EC2:** Instance management, Elastic IPs (static public IPs), Security Groups (acting as an AWS-level firewall to control inbound/outbound traffic).
*   **SSH:** Secure Shell protocol for remote command execution and file transfer to the EC2 instance using a `.pem` key for authentication.
*   **Nginx:** A high-performance web server and reverse proxy. It serves the static frontend files and proxies API requests to the backend.
*   **Python/Gunicorn:** Gunicorn (Green Unicorn) is a Python WSGI HTTP Server for UNIX. It serves the Python backend application.
*   **Systemd:** The init system and service manager used on Ubuntu (EC2 instance) for managing Nginx and Gunicorn services.
*   **Vite:** A fast build tool for modern web projects, used for the React frontend.
*   **npm:** Node Package Manager, used for managing frontend dependencies and build processes.
*   **Linux System Administration:** File permissions (`chmod`, `chown`), directory management (`mkdir`, `rm`), symbolic links (`ln -s`, `unlink`), Systemd daemon management (`systemctl daemon-reload`, `systemctl start/enable/status/restart`), network utilities (`ss`, `netstat`), firewall (`ufw`).
*   **Networking/HTTP:**
    *   **Public IP vs. Private IP:** The Elastic IP (`18.214.91.97`) is the public IP. Internal communication on the EC2 instance uses `localhost` (e.g., Nginx to Gunicorn).
    *   **HTTP Status Codes:** `403 Forbidden` (permission issue), `502 Bad Gateway` (proxy cannot connect to upstream server), `ERR_CONNECTION_REFUSED` (connection actively refused, often due to no service listening).

## 2. File Paths, Configurations, and Interconnections

### A. Frontend (Local Machine & EC2 Deployment)

*   **Local Frontend Project Root:** `c:/Users/admin/Desktop/chatdoc-ai-assist/frontend/`
    *   **`frontend/.env` (Local Environment Variables):**
        *   **Purpose:** Configures the frontend's API endpoint during local development and build.
        *   **Required Value:** `VITE_API_BASE_URL=http://18.214.91.97/api` (Updated to the new Elastic IP).
    *   **`frontend/package.json` & `frontend/package-lock.json`:**
        *   **Purpose:** Define frontend project dependencies and scripts (e.g., `npm install`, `npm run build`).
        *   **Action:** `npm install` (to install dependencies), `npm run build` (to compile frontend into `dist` folder).
    *   **`frontend/dist/` (Local Build Output):**
        *   **Purpose:** Contains the compiled static HTML, CSS, and JavaScript files ready for deployment.
        *   **Connection:** This folder's contents are transferred to the EC2 instance.

*   **EC2 Frontend Deployment Path:** `/var/www/html/chatdoc-frontend/`
    *   **Purpose:** This is the root directory where Nginx serves the static frontend files.
    *   **Permissions:** Owned by `www-data:www-data`, with directories set to `755` and files to `644` for Nginx to read them.
    *   **Connection:** Contents of local `frontend/dist/` are copied here.

### B. Nginx Configuration (EC2)

*   **Nginx Site Configuration File:** `/etc/nginx/sites-available/chatdoc-frontend-new`
    *   **Purpose:** Defines how Nginx handles requests for the ChatDoc application.
    *   **Content:**
        ```nginx
        server {
            listen 80; # Nginx listens on port 80 (standard HTTP)
            server_name 18.214.91.97; # Nginx responds to requests for this IP (Elastic IP)

            root /var/www/html/chatdoc-frontend; # Main root for all static frontend files
            index index.html index.htm; # Default files to serve
            charset utf-8;

            # Handle all requests for static files, falling back to index.html for client-side routing
            location / {
                try_files $uri $uri/ /index.html;
            }

            # Proxy API requests to the backend Gunicorn server
            location /api/ {
                proxy_pass http://localhost:8000; # FORWARDS requests to the backend running on localhost:8000
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 75s;
                proxy_read_timeout 75s;
            }
        }
        ```
    *   **Connection:** Nginx uses this file to serve the frontend from `/var/www/html/chatdoc-frontend/` and to forward `/api/` requests to the Gunicorn backend.

*   **Nginx Sites-Enabled Symlink:** `/etc/nginx/sites-enabled/chatdoc-frontend-new`
    *   **Purpose:** This is a symbolic link to the configuration file in `sites-available`, enabling the Nginx site.
    *   **Connection:** Nginx only loads configurations from `sites-enabled`.

### C. Backend (EC2)

*   **Backend Project Root:** `/home/ubuntu/chatdoc-ai-assist/backend/`
    *   **`backend/.env` (Backend Environment Variables):**
        *   **Purpose:** Contains sensitive credentials (e.g., Snowflake) and backend-specific configurations.
        *   **Example Content:** `FRONTEND_URL=http://18.214.91.97` (This is used by the backend, not directly by Gunicorn or Nginx for routing, but for internal logic if the backend needs to know the frontend URL).
    *   **`backend/venv/` (Python Virtual Environment):**
        *   **Purpose:** Isolates Python dependencies for the backend application.
        *   **Connection:** Gunicorn and the Python application run within this virtual environment.
    *   **`backend/main.py`:**
        *   **Purpose:** The main Python application file that Gunicorn serves (referenced as `main:app` in Gunicorn commands).

*   **Backend Startup Script (Deprecated for Systemd):** `/home/ubuntu/chatdoc-ai-assist/backend/start_gunicorn.sh`
    *   **Purpose:** A shell script to manually start Gunicorn. While not used by Systemd directly in the final setup, it provided a reference for the `ExecStart` command.
    *   **Content:**
        ```bash
        #!/bin/bash
        cd "$(dirname "$0")" # Navigates to /home/ubuntu/chatdoc-ai-assist/backend
        if [ -f .env ]; then export $(grep -v '^#' .env | xargs); fi # Loads backend/.env
        source venv/bin/activate
        exec venv/bin/gunicorn --workers 3 --bind 0.0.0.0:8000 --timeout 300 main:app
        ```

*   **Backend Systemd Service File:** `/etc/systemd/system/chatdoc.service`
    *   **Purpose:** Manages the Gunicorn backend service, ensuring it starts on boot and restarts on failure.
    *   **Final Corrected Content:**
        ```
        [Unit]
        Description=Gunicorn instance to serve chatdoc-ai-assist
        After=network.target

        [Service]
        User=ubuntu
        Group=www-data
        WorkingDirectory=/home/ubuntu/chatdoc-ai-assist/backend # CRITICAL: Ensures Gunicorn runs from the correct directory
        ExecStart=/bin/bash -c 'source /home/ubuntu/chatdoc-ai-assist/backend/venv/bin/activate && exec /home/ubuntu/chatdoc-ai-assist/backend/venv/bin/gunicorn --workers 1 --bind 0.0.0.0:8000 --timeout 300 main:app'
        ExecReload=/bin/kill -s HUP $MAINPID
        KillMode=mixed
        TimeoutStopSec=5
        PrivateTmp=true
        Restart=on-failure
        RestartSec=10

        [Install]
        WantedBy=multi-user.target
        ```
    *   **Connection:** This service runs Gunicorn, which listens on `0.0.0.0:8000` (accessible via `localhost:8000` from Nginx).

## 3. Troubleshooting Summary & Resolutions

### A. Initial State & Symptoms:
*   Web app not working after Elastic IP change.
*   Browser showed `ERR_CONNECTION_REFUSED` (Nginx not running).
*   Later, `403 Forbidden` (Nginx symlink missing).
*   Finally, `502 Bad Gateway` (Nginx couldn't reach backend).
*   EC2 terminal became unresponsive.

### B. Detailed Troubleshooting Steps & Resolutions:

1.  **Nginx Service Not Running (`ERR_CONNECTION_REFUSED`):**
    *   **Diagnosis:** `sudo systemctl status nginx` showed `inactive (dead)`.
    *   **Resolution:** Started and enabled Nginx.
        ```bash
        sudo systemctl start nginx
        sudo systemctl enable nginx
        sudo systemctl status nginx
        ```

2.  **Nginx `403 Forbidden`:**
    *   **Diagnosis:** Nginx was running, but serving 403. Confirmed `/etc/nginx/sites-enabled/chatdoc-frontend-new` symlink was missing.
    *   **Resolution:** Created the symlink. (This was done by the user in a previous interaction).

3.  **EC2 Terminal Unresponsiveness & High CPU:**
    *   **Symptom:** SSH terminal would become very slow or freeze after a few commands.
    *   **Diagnosis:** `ssh -i "D:\download\chatdoc-keypair.pem" ubuntu@18.214.91.97 "top -bn1 | head -n 20"` showed 100% CPU utilization, primarily by `gunicorn` processes. The `chatdoc.service` was configured with `--workers 3`, which was too many for the instance size.
    *   **Resolution:** Reduced Gunicorn workers to `1` in `/etc/systemd/system/chatdoc.service`.
        *   **Command:** `sudo nano /etc/systemd/system/chatdoc.service` (edited `--workers 3` to `--workers 1`)
        *   **Command:** `sudo systemctl daemon-reload`
        *   **Command:** `sudo systemctl restart chatdoc.service`

4.  **Backend `ModuleNotFoundError: No module named 'main'` (`502 Bad Gateway`):**
    *   **Symptom:** After reducing Gunicorn workers, the `chatdoc.service` failed to start with `status=3` and `ModuleNotFoundError: No module named 'main'` in `journalctl` logs.
    *   **Diagnosis:** The `ExecStart` command in `chatdoc.service` was trying to run Gunicorn without first changing the current directory to the backend application's root, causing Python to not find `main.py`. The original `start_gunicorn.sh` correctly used `cd "$(dirname "$0")"`.
    *   **Resolution:** Added `WorkingDirectory=/home/ubuntu/chatdoc-ai-assist/backend` to the `[Service]` section of `/etc/systemd/system/chatdoc.service`.
        *   **Command:** `sudo nano /etc/systemd/system/chatdoc.service` (added `WorkingDirectory` line)
        *   **Command:** `sudo systemctl daemon-reload`
        *   **Command:** `sudo systemctl restart chatdoc.service`
        *   **Verification:** `sudo systemctl status chatdoc.service` showed `active (running)` and successful Snowflake connection logs.

## 4. Final Verification

*   **Action:** Access `http://18.214.91.97` in the browser.
*   **Result:** Frontend loaded successfully, and API calls (e.g., sending messages) to the backend were successful, confirming full application functionality.
